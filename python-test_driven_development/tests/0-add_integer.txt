===================
testing function that add two integers
===================

Imported function from 0-add_integer.py
===================
    >>> add_integer = __import__('0-add_integer').add_integer

# Cas de base avec deux entiers
>>> add_integer(1, 2)
3
>>> add_integer(-5, 7)
2
>>> add_integer(0, 0)
0
>>> add_integer(123456, 654321)
777777

# Cas avec valeur par défaut de b
>>> add_integer(10)
108

# Cas avec float (doit caster en int)
>>> add_integer(2.9, 3.1)
5
>>> add_integer(2.0, 3)
5
>>> add_integer(2, 3.7)
5
>>> add_integer(-2.9, -3.1)
-5

# Cas mixtes float/int
>>> add_integer(5.5, 2)
7
>>> add_integer(5, 2.5)
7

# Cas avec float négatif
>>> add_integer(-5.5, -2.4)
-7

# Cas limites (grands nombres)
>>> add_integer(999999999, 1)
1000000000
>>> add_integer(-999999999, -1)
-1000000000

# Cas d'erreur : a ou b n'est pas int ou float
>>> add_integer("3", 2)
Traceback (most recent call last):
    ...
TypeError: a must be an integer
>>> add_integer(3, "2")
Traceback (most recent call last):
    ...
TypeError: b must be an integer
>>> add_integer([1, 2], 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer
>>> add_integer(3, None)
Traceback (most recent call last):
    ...
TypeError: b must be an integer
>>> add_integer(None, 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Cas où b est omis et a est float
>>> add_integer(2.7)
100

# Cas où a et b sont 0
>>> add_integer(0, 0)
0

# Cas où a est négatif et b positif
>>> add_integer(-2, 5)
3
>>> add_integer(2, -5)
-3
